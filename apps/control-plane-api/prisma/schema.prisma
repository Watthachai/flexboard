// This is your Prisma schema file for PostgreSQL on Railway
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  licenseType String   @default("basic") @map("license_type")
  apiKey      String   @unique @map("api_key")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  dashboards       Dashboard[]
  metadataVersions MetadataVersion[]
  syncLogs         SyncLog[]

  @@map("tenants")
}

model Dashboard {
  id          String   @id @default(cuid())
  tenantId    String   @map("tenant_id")
  name        String
  slug        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  tenant  Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  widgets Widget[]

  @@unique([tenantId, slug])
  @@map("dashboards")
}

model Widget {
  id          String   @id @default(cuid())
  dashboardId String   @map("dashboard_id")
  name        String
  type        String // chart, kpi, table, etc.
  config      Json // Widget configuration (query, styling, etc.)
  position    Json? // Layout position { x, y, w, h }
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relationships
  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@map("widgets")
}

model MetadataVersion {
  id          String    @id @default(cuid())
  tenantId    String    @map("tenant_id")
  version     Int
  metadata    Json // Complete dashboard and widget metadata
  status      String    @default("draft") // draft, published, archived
  publishedAt DateTime? @map("published_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  createdBy   String    @map("created_by")

  // Relationships
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, version])
  @@map("metadata_versions")
}

model SyncLog {
  id              String   @id @default(cuid())
  tenantId        String?  @map("tenant_id")
  agentVersion    String?  @map("agent_version")
  syncStatus      String   @map("sync_status") // success, error
  metadataVersion Int?     @map("metadata_version")
  syncDurationMs  Int?     @map("sync_duration_ms")
  errorMessage    String?  @map("error_message")
  syncedAt        DateTime @default(now()) @map("synced_at")

  // Relationships
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@map("sync_logs")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   @default("admin") // admin, viewer
  password  String
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}
